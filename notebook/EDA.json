{
	"name": "EDA",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkfinancial",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3c04518f-875a-49e5-8c78-42ede1d017c7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fe1dcb1b-6718-40b9-aafb-4e0c35dee161/resourceGroups/nequifinancial/providers/Microsoft.Synapse/workspaces/nequifinancial/bigDataPools/sparkfinancial",
				"name": "sparkfinancial",
				"type": "Spark",
				"endpoint": "https://nequifinancial.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkfinancial",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Librerias**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.functions import col, isnan, when, count, desc, to_date, month, year, dayofmonth\n",
					"from pyspark.sql.types import StructType, StructField, IntegerType, StringType, FloatType, BooleanType, TimestampType\n",
					"from pyspark.sql.functions import to_date, isnull\n",
					"from pyspark.sql.functions import to_timestamp\n",
					"import matplotlib.pyplot as plt\n",
					"import seaborn as sns\n",
					"import pandas as pd\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Carga de los CSV"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"path = \"abfss://raw@nequidl.dfs.core.windows.net\"\n",
					"transacciones_df = spark.read.option(\"delimiter\", \",\").option(\"header\", True).csv(f\"{path}/transactions_data_limited.csv\")\n",
					"cards_df = spark.read.option(\"delimiter\", \",\").option(\"header\", True).csv(f\"{path}/cards_data.csv\")\n",
					"users_df = spark.read.option(\"delimiter\", \",\").option(\"header\", True).csv(f\"{path}/users_data.csv\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"transacciones_df.show(5)\n",
					"cards_df.show(5)\n",
					"users_df.show(5)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"transacciones_df.printSchema()\n",
					"users_df.printSchema()\n",
					"cards_df.printSchema()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"print(f\"Transacciones: {transacciones_df.count()}\")\n",
					"print(f\"Usuarios: {users_df.count()}\")\n",
					"print(f\"Tipos de Tarjeta: {cards_df.count()}\")\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"# Contar nulos por columna en cada DataFrame\n",
					"transacciones_df.select([count(when(col(c).isNull() | isnan(c), c)).alias(c) for c in transacciones_df.columns]).show()\n",
					"cards_df.select([count(when(col(c).isNull() | isnan(c), c)).alias(c) for c in cards_df.columns]).show()\n",
					"users_df.select([count(when(col(c).isNull() | isnan(c), c)).alias(c) for c in users_df.columns]).show()\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"# Contar duplicados solo en las columnas ID de cada DataFrame\n",
					"print(\"Duplicados en transacciones (id):\", transacciones_df.count() - transacciones_df.dropDuplicates([\"id\"]).count())\n",
					"print(\"Duplicados en cards (id):\", cards_df.count() - cards_df.dropDuplicates([\"id\"]).count())\n",
					"print(\"Duplicados en users (id):\", users_df.count() - users_df.dropDuplicates([\"id\"]).count())\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"# Describe para transacciones\n",
					"print(\" Descripci贸n de Transacciones:\")\n",
					"transacciones_df.describe().show()\n",
					"\n",
					"# Describe para cards\n",
					"print(\" Descripci贸n de Cards:\")\n",
					"cards_df.describe().show()\n",
					"\n",
					"# Describe para users\n",
					"print(\" Descripci贸n de Users:\")\n",
					"users_df.describe().show()\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"# Intentar convertir la columna date\n",
					"transacciones_df = transacciones_df.withColumn(\"date_parsed\", to_date(\"date\", \"yyyy-MM-dd\"))\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Intentar convertir con el formato correcto que incluya la hora\n",
					"transacciones_df = transacciones_df.withColumn(\"date_parsed\", to_timestamp(col(\"date\"), \"yyyy-MM-dd HH:mm:ss\"))\n",
					"\n",
					"# Filtrar los errores de conversi贸n\n",
					"errores_fecha_df = transacciones_df.filter(col(\"date_parsed\").isNull())\n",
					"\n",
					"# Mostrar filas con errores\n",
					"errores_fecha_df.select(\"id\", \"date\").show(truncate=False)\n",
					"\n",
					"# Contar errores\n",
					"print(f\"Cantidad de errores en la columna 'date': {errores_fecha_df.count()}\")\n",
					""
				],
				"execution_count": 26
			}
		]
	}
}